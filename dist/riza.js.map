{"mappings":"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","sources":["src/utils.js","src/riza.js"],"sourcesContent":["\n/**\n * Node for a linked list.\n */\nexport function Node (value)\n{\n\tthis.value = null;\n\tthis.next = null;\n\tthis.prev = null;\n\tthis.list = null;\n}\n\n/**\n * Creates a new node.\n * @param {any} value \n * @returns {Node}\n */\nNode.create = function (value)\n{\n\tlet node = new Node();\n\tnode.value = value;\n\treturn node;\n}\n\n/**\n * Unlinks and frees the node. Returns the node's value.\n * @returns {any}\n */\nNode.prototype.free = function ()\n{\n\tlet value = this.value;\n\tthis.unlink();\n\n\tthis.next = this.prev = null;\n\tthis.list = null;\n\n\tthis.value = null;\n\treturn value;\n}\n\n/**\n * Links the node after the given reference.\n * @param {Node} ref\n * @param {List} list\n * @returns {Node}\n */\nNode.prototype.linkAfter = function (ref, list)\n{\n\tthis.next = ref !== null ? ref.next : null;\n\tthis.prev = ref;\n\tthis.list = list;\n\n\tif (ref !== null) {\n\t\tif (ref.next !== null) ref.next.prev = this;\n\t\tref.next = this;\n\t}\n\n\tif (list.tail === ref)\n\t\tlist.tail = this;\n\n\tif (list.head === null)\n\t\tlist.head = this;\n\n\tlist.length++;\n\treturn this;\n}\n\n/**\n * Links the node before the given reference.\n * @param {Node} ref\n * @param {List} list\n * @returns {Node}\n */\nNode.prototype.linkBefore = function (ref, list)\n{\n\tthis.prev = ref !== null ? ref.prev : null;\n\tthis.next = ref;\n\tthis.list = list;\n\n\tif (ref !== null) {\n\t\tif (ref.prev !== null) ref.prev.next = this;\n\t\tref.prev = this;\n\t}\n\n\tif (list.head === ref)\n\t\tlist.head = this;\n\n\tif (list.tail === null)\n\t\tlist.tail = this;\n\n\tlist.length++;\n\treturn this;\n}\n\n/**\n * Unlinks the node by linking the `prev` and `next` nodes together (when available).\n * @returns {Node}\n */\nNode.prototype.unlink = function ()\n{\n\tif (this.prev) this.prev.next = this.next;\n\tif (this.next) this.next.prev = this.prev;\n\n\tif (this.list.head === this) this.list.head = this.next;\n\tif (this.list.tail === this) this.list.tail = this.prev;\n\n\tthis.list.length--;\n\treturn this;\n}\n\n/**\n * Doubly linked list.\n */\nexport function List ()\n{\n\tthis.head = null;\n\tthis.tail = null;\n\tthis.length = 0;\n}\n\n/**\n * Creates a new linked list.\n * @returns {List}\n */\nList.create = function()\n{\n\treturn new List();\n}\n\n/**\n * Frees the list and removes all nodes.\n */\nList.prototype.free = function()\n{\n\tthis.clear();\n}\n\n/**\n * Clears the list by freeing all nodes. Values are preserved.\n * @returns {List}\n */\nList.prototype.reset = function()\n{\n\twhile (this.head !== null)\n\t\tthis.head.free();\n\n\treturn this;\n}\n\n/**\n * Clears the list by freeing all nodes and values.\n * @returns {List}\n */\nList.prototype.clear = function()\n{\n\twhile (this.head !== null)\n\t{\n\t\tif (this.head.value !== null)\n\t\t\tthis.head.value.free();\n\n\t\tthis.head.free();\n\t}\n\n\treturn this;\n}\n\n/**\n * Returns the value at the head of the list.\n * @returns {any}\n */\nList.prototype.first = function ()\n{\n\treturn this.head !== null ? this.head.value : null;\n}\n\n/**\n * Returns the value at the tail of the list.\n * @returns {any}\n */\nList.prototype.last = function ()\n{\n\treturn this.tail !== null ? this.tail.value : null;\n}\n\n/**\n * Finds an specific value and returns the node, or `null` if not found.\n * @returns {Node}\n */\nList.prototype.find = function (value)\n{\n\tfor (let i = this.head; i !== null; i = i.next)\n\t{\n\t\tif (i.value === value)\n\t\t\treturn i;\n\t}\n\n\treturn null;\n}\n\n/**\n * Inserts a value at the head of the list.\n * @param {any} value\n * @returns {any}\n */\nList.prototype.unshift = function (value)\n{\n\tNode.create(value).linkBefore(this.head, this);\n\treturn value;\n}\n\n/**\n * Removes a value from the head of the list, or `null` if the list is empty.\n * @returns {any}\n */\nList.prototype.shift = function ()\n{\n\treturn this.head === null ? null : this.head.free();\n}\n\n/**\n * Inserts a value at the tail of the list.\n * @param {any} value\n * @returns {any}\n */\nList.prototype.push = function (value)\n{\n\tNode.create(value).linkAfter(this.tail, this);\n\treturn value;\n}\n\n/**\n * Removes a value from the tail of the list.\n * @returns {any}\n */\nList.prototype.pop = function ()\n{\n\treturn this.tail === null ? null : this.tail.free();\n}\n","\nimport { List } from './utils.js';\n\n/**\n */\nlet activeWatcher = null;\nlet signalsPropagating = false;\n\n/**\n */\nlet propagationQueue = List.create();\nlet propagationMicroTask = false;\n\n/**\n */\nfunction propagate (signal)\n{\n\tif (signal.isPropagating === true)\n\t\treturn;\n\n\tsignal.isPropagating = true;\n\n\tlet currentWatchers = signal.watchers;\n\tsignal.watchers = List.create();\n\n\twhile (currentWatchers.length) {\n\t\tcurrentWatchers.shift()();\n\t}\n\n\tcurrentWatchers.free();\n\tsignal.isPropagating = false;\n}\n\n/**\n */\nfunction propagateQueue ()\n{\n\tpropagationMicroTask = false;\n\n\tsignalsPropagating = true;\n\n\twhile (propagationQueue.length) {\n\t\tpropagate(propagationQueue.shift());\n\t}\n\n\tsignalsPropagating = false;\n}\n\n/**\n */\nfunction accessorHandler (signal, newValue)\n{\n\tif (newValue === undefined)\n\t{\n\t\tif (activeWatcher !== null)\n\t\t{\n\t\t\tif (signal.watchers.find(activeWatcher) === null)\n\t\t\t\tsignal.watchers.push(activeWatcher);\n\t\t}\n\t\n\t\treturn signal.value;\n\t}\n\n\t// Do not trigger any propagation if the new value is the same as the current one.\n\tif (signal.value === newValue)\n\t\treturn signal.accessor;\n\n\tsignal.previousValue = signal.value;\n\tsignal.value = newValue;\n\n\tif (signalsPropagating === true)\n\t{\n\t\tif (signal.isPropagating)\n\t\t\treturn signal.accessor;\n\n\t\tif (signal.wasQueued === false)\n\t\t{\n\t\t\tpropagationQueue.push(signal);\n\t\t\tsignal.wasQueued = true;\n\n\t\t\tif (propagationMicroTask === false)\n\t\t\t{\n\t\t\t\tqueueMicrotask(propagateQueue);\n\t\t\t\tpropagationMicroTask = true;\n\t\t\t}\n\t\t}\n\n\t\treturn signal.accessor;\n\t}\n\n\tsignalsPropagating = true;\n\tpropagate(signal);\n\tsignalsPropagating = false;\n\n\treturn signal.accessor;\n}\n\n/**\n * Creates a new signal.\n * @param {any} value?\n */\nexport function signal (value=null)\n{\n\tconst data = {\n\t\twatchers: List.create(),\n\t\tvalue: value,\n\t\tisPropagating: false,\n\t\twasQueued: false\n\t};\n\n\tdata.accessor = (newValue=undefined) => {\n\t\treturn accessorHandler (data, newValue);\n\t};\n\n\treturn data.accessor;\n}\n\n/**\n * Creates a new signal side effect.\n * @param {function} fn\n */\nexport function effect (fn, id=null)\n{\n\tlet previousWatcher = null;\n\tlet active = false;\n\n\tconst watcher = function()\n\t{\n\t\tif (active === true) return;\n\t\tactive = true;\n\n\t\tpreviousWatcher = activeWatcher;\n\t\tactiveWatcher = watcher;\n\n\t\ttry {\n\t\t\tfn();\n\t\t}\n\t\tfinally {\n\t\t}\n\n\t\tactiveWatcher = previousWatcher;\n\t\tactive = false;\n\t};\n\n\twatcher.id = id;\n\twatcher();\n\n\treturn watcher;\n}\n\n/**\n * Replaces a node by the specified value returns the new node. If the value is a string it will be converted to a node first.\n * @param {Node} node\n * @param {Node|string|Array<Node|string>} value\n * @returns {Node}\n */\nexport function replaceNode (node, value)\n{\n\tif (value instanceof Array)\n\t{\n\t\tlet elem = document.createDocumentFragment();\n\n\t\tfor (let i of value)\n\t\t{\n\t\t\tif (!(i instanceof Node))\n\t\t\t\ti = document.createTextNode(i);\n\n\t\t\telem.appendChild(i);\n\t\t}\n\n\t\tvalue = elem;\n\t}\n\telse\n\t{\n\t\tif (!(value instanceof Node))\n\t\t\tvalue = document.createTextNode(value);\n\t}\n\n\tnode.replaceWith(value);\n\treturn value;\n}\n"],"names":["$a86ae7da7dd6c514$export$85c928794f8d04d4","value","this","next","prev","list","$a86ae7da7dd6c514$export$54c2e3dc7acea9f5","head","tail","length","create","node","prototype","free","unlink","linkAfter","ref","linkBefore","clear","reset","first","last","find","i","unshift","shift","push","pop","$0cb80798ba53ee9a$var$activeWatcher","$0cb80798ba53ee9a$var$signalsPropagating","$0cb80798ba53ee9a$var$propagationQueue","$0cb80798ba53ee9a$var$propagationMicroTask","$0cb80798ba53ee9a$var$propagate","signal","isPropagating","currentWatchers","watchers","$0cb80798ba53ee9a$var$propagateQueue","$0cb80798ba53ee9a$export$e2ef10f86a8d60e8","data","wasQueued","accessor","newValue","undefined","previousValue","queueMicrotask","$0cb80798ba53ee9a$var$accessorHandler","$0cb80798ba53ee9a$export$dc573d8a6576cdb3","fn","id","previousWatcher","active","watcher","$0cb80798ba53ee9a$export$5542201de9311ab2","Array","elem","document","createDocumentFragment","Node","createTextNode","appendChild","replaceWith"],"version":3,"file":"riza.js.map"}